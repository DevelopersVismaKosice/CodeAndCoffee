locals {
  ses_arn  = "arn:aws:ses:eu-west-1:111111111111:identity/xxx.yyy"
  app_link = var.environment == "dev" ? "https://dev.xxx.yyy" : "https://www.xxx.yyy"
}

resource "aws_cognito_user_pool" "this" {
  name                       = format("xxx-app-pool%s", var.environment == "dev" ? "-dev" : "")
  username_attributes        = ["email"]
  auto_verified_attributes   = ["email"]
  sms_authentication_message = "Your xxx application authentication code is {####}"

  user_pool_add_ons {
    advanced_security_mode = "AUDIT"
  }

  email_configuration {
    reply_to_email_address = "no-reply@xxx.yyy"
    from_email_address     = "admin@xxx.yyy"
    email_sending_account  = "DEVELOPER"
    source_arn             = local.ses_arn
  }

  admin_create_user_config {
    allow_admin_create_user_only = true

    invite_message_template {
      sms_message   = "Your xxx application username is {username} and temporary password is {####}"
      email_subject = "[xxx App] Your temporary password"
      email_message = <<EOF
Dear recipient,<br/>
<br/>
this message was generated by xxx application, provided by Ness Digital Engineering, for you only, do not reply to this email.<br/>
<br/>
Please follow link ${local.app_link} to access xxx application.<br/>
Your username is <b>{username}</b> and temporary password is <b>{####}</b><br/>
<br/>
Regards,<br/>
xxx team
EOF        
    }
  }

  account_recovery_setting {
    recovery_mechanism {
      name     = "verified_email"
      priority = 1
    }
  }

  username_configuration {
    case_sensitive = false
  }

  password_policy {
    minimum_length                   = 8
    require_lowercase                = true
    require_numbers                  = true
    require_uppercase                = true
    require_symbols                  = true
    temporary_password_validity_days = 7
  }

  schema {
    attribute_data_type      = "String"
    name                     = "name"
    required                 = true
    developer_only_attribute = "false"
    mutable                  = false

    string_attribute_constraints {
      min_length = 0
      max_length = 2048
    }
  }

  schema {
    name                     = "clientId"
    attribute_data_type      = "String"
    developer_only_attribute = false
    mutable                  = false
    required                 = "false"

    string_attribute_constraints {
      min_length = 1
      max_length = 256
    }
  }

  verification_message_template {
    default_email_option = "CONFIRM_WITH_CODE"
    email_subject        = "[xxx App] Your verification code"
    email_message        = <<EOF
Dear recipient,<br/>
<br/>
this message was generated by xxx application, provided by Ness Digital Engineering, for you only, do not reply to this email.<br/>
<br/>
Your verification code is <b>{####}</b><br/>
<br/>
Regards,<br/>
xxx team
EOF   
  }
}

resource "aws_cognito_user_pool_domain" "this" {
  domain          = format("auth%s.xxx.yyy", var.environment == "dev" ? "-dev" : "")
  certificate_arn = local.certificate_arn
  user_pool_id    = aws_cognito_user_pool.this.id
}

resource "aws_cognito_user_pool_client" "client" {
  name                                 = "Sign in client"
  user_pool_id                         = aws_cognito_user_pool.this.id
  refresh_token_validity               = 1
  prevent_user_existence_errors        = "ENABLED"
  supported_identity_providers         = ["COGNITO"]
  allowed_oauth_flows                  = ["code"]
  allowed_oauth_flows_user_pool_client = true
  allowed_oauth_scopes                 = ["phone", "email", "openid", "profile", "aws.cognito.signin.user.admin"]
  callback_urls                        = var.cognito_callback
  explicit_auth_flows                  = ["ALLOW_ADMIN_USER_PASSWORD_AUTH", "ALLOW_USER_PASSWORD_AUTH", "ALLOW_CUSTOM_AUTH", "ALLOW_USER_SRP_AUTH", "ALLOW_REFRESH_TOKEN_AUTH"]
  read_attributes = ["address", "birthdate", "email",
    "email_verified", "family_name", "gender", "given_name",
    "locale", "middle_name", "name", "nickname", "phone_number", "phone_number_verified",
    "picture", "preferred_username", "profile", "zoneinfo", "updated_at", "website",
    "custom:clientId"
  ]
  write_attributes = ["address", "birthdate", "email",
    "family_name", "gender", "given_name",
    "locale", "middle_name", "name", "nickname", "phone_number",
    "picture", "preferred_username", "profile", "zoneinfo", "updated_at", "website",
    "custom:clientId"
  ]
}

resource "aws_cognito_user_group" "user" {
  name         = "user"
  user_pool_id = aws_cognito_user_pool.this.id
  role_arn     = format("arn:aws:iam::${data.aws_caller_identity.current.account_id}:role/xxx-app-%s-user-role", var.environment == "dev" ? "dev" : "prod")
}

resource "aws_cognito_user_group" "admin" {
  name         = "admin"
  user_pool_id = aws_cognito_user_pool.this.id
  role_arn     = format("arn:aws:iam::${data.aws_caller_identity.current.account_id}:role/xxx-app-%s-admin-role", var.environment == "dev" ? "dev" : "prod")
}

resource "aws_cognito_user_group" "superadmin" {
  name         = "superadmin"
  user_pool_id = aws_cognito_user_pool.this.id
  role_arn     = format("arn:aws:iam::${data.aws_caller_identity.current.account_id}:role/xxx-app-%s-superadmin-role", var.environment == "dev" ? "dev" : "prod")
}

resource "null_resource" "cognito_user" {
  count = length(var.cognito_users)

  triggers = {
    always_run = timestamp()
  }

  provisioner "local-exec" {
    command    = "aws cognito-idp admin-create-user --user-pool-id ${aws_cognito_user_pool.this.id} --username ${lookup(var.cognito_users[count.index], "email")} --user-attributes Name=custom:clientId,Value=${lookup(var.cognito_users[count.index], "customId")}"
    on_failure = continue
  }

  provisioner "local-exec" {
    command    = "aws cognito-idp admin-add-user-to-group --user-pool-id ${aws_cognito_user_pool.this.id} --username ${lookup(var.cognito_users[count.index], "email")} --group-name ${lookup(var.cognito_users[count.index], "group")}"
    on_failure = continue
  }

  provisioner "local-exec" {
    command    = "aws cognito-idp admin-set-user-password --user-pool-id ${aws_cognito_user_pool.this.id} --username ${lookup(var.cognito_users[count.index], "email")} --permanent --password ${lookup(var.cognito_users[count.index], "password")}"
    on_failure = continue
  }
}

